// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: world_data.proto

#ifndef PROTOBUF_world_5fdata_2eproto__INCLUDED
#define PROTOBUF_world_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_world_5fdata_2eproto();
void protobuf_AssignDesc_world_5fdata_2eproto();
void protobuf_ShutdownFile_world_5fdata_2eproto();

class Coord;
class Position;
class RobotData;
class WheelsVelocity;
class WorldData;

// ===================================================================

class Coord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.Coord) */ {
 public:
  Coord();
  virtual ~Coord();

  Coord(const Coord& from);

  inline Coord& operator=(const Coord& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Coord& default_instance();

  void Swap(Coord* other);

  // implements Message ----------------------------------------------

  inline Coord* New() const { return New(NULL); }

  Coord* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Coord& from);
  void MergeFrom(const Coord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Coord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // optional double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // @@protoc_insertion_point(class_scope:protocol.Coord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double x_;
  double y_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_world_5fdata_2eproto();
  friend void protobuf_AssignDesc_world_5fdata_2eproto();
  friend void protobuf_ShutdownFile_world_5fdata_2eproto();

  void InitAsDefaultInstance();
  static Coord* default_instance_;
};
// -------------------------------------------------------------------

class Position : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Position& default_instance();

  void Swap(Position* other);

  // implements Message ----------------------------------------------

  inline Position* New() const { return New(NULL); }

  Position* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Position* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protocol.Coord coord = 1;
  bool has_coord() const;
  void clear_coord();
  static const int kCoordFieldNumber = 1;
  const ::protocol::Coord& coord() const;
  ::protocol::Coord* mutable_coord();
  ::protocol::Coord* release_coord();
  void set_allocated_coord(::protocol::Coord* coord);

  // optional double theta = 2;
  void clear_theta();
  static const int kThetaFieldNumber = 2;
  double theta() const;
  void set_theta(double value);

  // @@protoc_insertion_point(class_scope:protocol.Position)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::protocol::Coord* coord_;
  double theta_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_world_5fdata_2eproto();
  friend void protobuf_AssignDesc_world_5fdata_2eproto();
  friend void protobuf_ShutdownFile_world_5fdata_2eproto();

  void InitAsDefaultInstance();
  static Position* default_instance_;
};
// -------------------------------------------------------------------

class WheelsVelocity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.WheelsVelocity) */ {
 public:
  WheelsVelocity();
  virtual ~WheelsVelocity();

  WheelsVelocity(const WheelsVelocity& from);

  inline WheelsVelocity& operator=(const WheelsVelocity& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WheelsVelocity& default_instance();

  void Swap(WheelsVelocity* other);

  // implements Message ----------------------------------------------

  inline WheelsVelocity* New() const { return New(NULL); }

  WheelsVelocity* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WheelsVelocity& from);
  void MergeFrom(const WheelsVelocity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WheelsVelocity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double leftWheelVelocity = 1;
  void clear_leftwheelvelocity();
  static const int kLeftWheelVelocityFieldNumber = 1;
  double leftwheelvelocity() const;
  void set_leftwheelvelocity(double value);

  // optional double rightWheelVelocity = 2;
  void clear_rightwheelvelocity();
  static const int kRightWheelVelocityFieldNumber = 2;
  double rightwheelvelocity() const;
  void set_rightwheelvelocity(double value);

  // @@protoc_insertion_point(class_scope:protocol.WheelsVelocity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double leftwheelvelocity_;
  double rightwheelvelocity_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_world_5fdata_2eproto();
  friend void protobuf_AssignDesc_world_5fdata_2eproto();
  friend void protobuf_ShutdownFile_world_5fdata_2eproto();

  void InitAsDefaultInstance();
  static WheelsVelocity* default_instance_;
};
// -------------------------------------------------------------------

class RobotData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.RobotData) */ {
 public:
  RobotData();
  virtual ~RobotData();

  RobotData(const RobotData& from);

  inline RobotData& operator=(const RobotData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotData& default_instance();

  void Swap(RobotData* other);

  // implements Message ----------------------------------------------

  inline RobotData* New() const { return New(NULL); }

  RobotData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RobotData& from);
  void MergeFrom(const RobotData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RobotData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protocol.Position position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::protocol::Position& position() const;
  ::protocol::Position* mutable_position();
  ::protocol::Position* release_position();
  void set_allocated_position(::protocol::Position* position);

  // optional .protocol.WheelsVelocity wheelsVelocity = 2;
  bool has_wheelsvelocity() const;
  void clear_wheelsvelocity();
  static const int kWheelsVelocityFieldNumber = 2;
  const ::protocol::WheelsVelocity& wheelsvelocity() const;
  ::protocol::WheelsVelocity* mutable_wheelsvelocity();
  ::protocol::WheelsVelocity* release_wheelsvelocity();
  void set_allocated_wheelsvelocity(::protocol::WheelsVelocity* wheelsvelocity);

  // @@protoc_insertion_point(class_scope:protocol.RobotData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::protocol::Position* position_;
  ::protocol::WheelsVelocity* wheelsvelocity_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_world_5fdata_2eproto();
  friend void protobuf_AssignDesc_world_5fdata_2eproto();
  friend void protobuf_ShutdownFile_world_5fdata_2eproto();

  void InitAsDefaultInstance();
  static RobotData* default_instance_;
};
// -------------------------------------------------------------------

class WorldData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.WorldData) */ {
 public:
  WorldData();
  virtual ~WorldData();

  WorldData(const WorldData& from);

  inline WorldData& operator=(const WorldData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldData& default_instance();

  void Swap(WorldData* other);

  // implements Message ----------------------------------------------

  inline WorldData* New() const { return New(NULL); }

  WorldData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldData& from);
  void MergeFrom(const WorldData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WorldData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protocol.RobotData robotData = 1;
  bool has_robotdata() const;
  void clear_robotdata();
  static const int kRobotDataFieldNumber = 1;
  const ::protocol::RobotData& robotdata() const;
  ::protocol::RobotData* mutable_robotdata();
  ::protocol::RobotData* release_robotdata();
  void set_allocated_robotdata(::protocol::RobotData* robotdata);

  // repeated .protocol.Coord obstacleCoords = 2;
  int obstaclecoords_size() const;
  void clear_obstaclecoords();
  static const int kObstacleCoordsFieldNumber = 2;
  const ::protocol::Coord& obstaclecoords(int index) const;
  ::protocol::Coord* mutable_obstaclecoords(int index);
  ::protocol::Coord* add_obstaclecoords();
  ::google::protobuf::RepeatedPtrField< ::protocol::Coord >*
      mutable_obstaclecoords();
  const ::google::protobuf::RepeatedPtrField< ::protocol::Coord >&
      obstaclecoords() const;

  // optional .protocol.Coord ballCoord = 3;
  bool has_ballcoord() const;
  void clear_ballcoord();
  static const int kBallCoordFieldNumber = 3;
  const ::protocol::Coord& ballcoord() const;
  ::protocol::Coord* mutable_ballcoord();
  ::protocol::Coord* release_ballcoord();
  void set_allocated_ballcoord(::protocol::Coord* ballcoord);

  // @@protoc_insertion_point(class_scope:protocol.WorldData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::protocol::RobotData* robotdata_;
  ::google::protobuf::RepeatedPtrField< ::protocol::Coord > obstaclecoords_;
  ::protocol::Coord* ballcoord_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_world_5fdata_2eproto();
  friend void protobuf_AssignDesc_world_5fdata_2eproto();
  friend void protobuf_ShutdownFile_world_5fdata_2eproto();

  void InitAsDefaultInstance();
  static WorldData* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Coord

// optional double x = 1;
inline void Coord::clear_x() {
  x_ = 0;
}
inline double Coord::x() const {
  // @@protoc_insertion_point(field_get:protocol.Coord.x)
  return x_;
}
inline void Coord::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:protocol.Coord.x)
}

// optional double y = 2;
inline void Coord::clear_y() {
  y_ = 0;
}
inline double Coord::y() const {
  // @@protoc_insertion_point(field_get:protocol.Coord.y)
  return y_;
}
inline void Coord::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:protocol.Coord.y)
}

// -------------------------------------------------------------------

// Position

// optional .protocol.Coord coord = 1;
inline bool Position::has_coord() const {
  return !_is_default_instance_ && coord_ != NULL;
}
inline void Position::clear_coord() {
  if (GetArenaNoVirtual() == NULL && coord_ != NULL) delete coord_;
  coord_ = NULL;
}
inline const ::protocol::Coord& Position::coord() const {
  // @@protoc_insertion_point(field_get:protocol.Position.coord)
  return coord_ != NULL ? *coord_ : *default_instance_->coord_;
}
inline ::protocol::Coord* Position::mutable_coord() {
  
  if (coord_ == NULL) {
    coord_ = new ::protocol::Coord;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Position.coord)
  return coord_;
}
inline ::protocol::Coord* Position::release_coord() {
  // @@protoc_insertion_point(field_release:protocol.Position.coord)
  
  ::protocol::Coord* temp = coord_;
  coord_ = NULL;
  return temp;
}
inline void Position::set_allocated_coord(::protocol::Coord* coord) {
  delete coord_;
  coord_ = coord;
  if (coord) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Position.coord)
}

// optional double theta = 2;
inline void Position::clear_theta() {
  theta_ = 0;
}
inline double Position::theta() const {
  // @@protoc_insertion_point(field_get:protocol.Position.theta)
  return theta_;
}
inline void Position::set_theta(double value) {
  
  theta_ = value;
  // @@protoc_insertion_point(field_set:protocol.Position.theta)
}

// -------------------------------------------------------------------

// WheelsVelocity

// optional double leftWheelVelocity = 1;
inline void WheelsVelocity::clear_leftwheelvelocity() {
  leftwheelvelocity_ = 0;
}
inline double WheelsVelocity::leftwheelvelocity() const {
  // @@protoc_insertion_point(field_get:protocol.WheelsVelocity.leftWheelVelocity)
  return leftwheelvelocity_;
}
inline void WheelsVelocity::set_leftwheelvelocity(double value) {
  
  leftwheelvelocity_ = value;
  // @@protoc_insertion_point(field_set:protocol.WheelsVelocity.leftWheelVelocity)
}

// optional double rightWheelVelocity = 2;
inline void WheelsVelocity::clear_rightwheelvelocity() {
  rightwheelvelocity_ = 0;
}
inline double WheelsVelocity::rightwheelvelocity() const {
  // @@protoc_insertion_point(field_get:protocol.WheelsVelocity.rightWheelVelocity)
  return rightwheelvelocity_;
}
inline void WheelsVelocity::set_rightwheelvelocity(double value) {
  
  rightwheelvelocity_ = value;
  // @@protoc_insertion_point(field_set:protocol.WheelsVelocity.rightWheelVelocity)
}

// -------------------------------------------------------------------

// RobotData

// optional .protocol.Position position = 1;
inline bool RobotData::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
inline void RobotData::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
inline const ::protocol::Position& RobotData::position() const {
  // @@protoc_insertion_point(field_get:protocol.RobotData.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::protocol::Position* RobotData::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::protocol::Position;
  }
  // @@protoc_insertion_point(field_mutable:protocol.RobotData.position)
  return position_;
}
inline ::protocol::Position* RobotData::release_position() {
  // @@protoc_insertion_point(field_release:protocol.RobotData.position)
  
  ::protocol::Position* temp = position_;
  position_ = NULL;
  return temp;
}
inline void RobotData::set_allocated_position(::protocol::Position* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.RobotData.position)
}

// optional .protocol.WheelsVelocity wheelsVelocity = 2;
inline bool RobotData::has_wheelsvelocity() const {
  return !_is_default_instance_ && wheelsvelocity_ != NULL;
}
inline void RobotData::clear_wheelsvelocity() {
  if (GetArenaNoVirtual() == NULL && wheelsvelocity_ != NULL) delete wheelsvelocity_;
  wheelsvelocity_ = NULL;
}
inline const ::protocol::WheelsVelocity& RobotData::wheelsvelocity() const {
  // @@protoc_insertion_point(field_get:protocol.RobotData.wheelsVelocity)
  return wheelsvelocity_ != NULL ? *wheelsvelocity_ : *default_instance_->wheelsvelocity_;
}
inline ::protocol::WheelsVelocity* RobotData::mutable_wheelsvelocity() {
  
  if (wheelsvelocity_ == NULL) {
    wheelsvelocity_ = new ::protocol::WheelsVelocity;
  }
  // @@protoc_insertion_point(field_mutable:protocol.RobotData.wheelsVelocity)
  return wheelsvelocity_;
}
inline ::protocol::WheelsVelocity* RobotData::release_wheelsvelocity() {
  // @@protoc_insertion_point(field_release:protocol.RobotData.wheelsVelocity)
  
  ::protocol::WheelsVelocity* temp = wheelsvelocity_;
  wheelsvelocity_ = NULL;
  return temp;
}
inline void RobotData::set_allocated_wheelsvelocity(::protocol::WheelsVelocity* wheelsvelocity) {
  delete wheelsvelocity_;
  wheelsvelocity_ = wheelsvelocity;
  if (wheelsvelocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.RobotData.wheelsVelocity)
}

// -------------------------------------------------------------------

// WorldData

// optional .protocol.RobotData robotData = 1;
inline bool WorldData::has_robotdata() const {
  return !_is_default_instance_ && robotdata_ != NULL;
}
inline void WorldData::clear_robotdata() {
  if (GetArenaNoVirtual() == NULL && robotdata_ != NULL) delete robotdata_;
  robotdata_ = NULL;
}
inline const ::protocol::RobotData& WorldData::robotdata() const {
  // @@protoc_insertion_point(field_get:protocol.WorldData.robotData)
  return robotdata_ != NULL ? *robotdata_ : *default_instance_->robotdata_;
}
inline ::protocol::RobotData* WorldData::mutable_robotdata() {
  
  if (robotdata_ == NULL) {
    robotdata_ = new ::protocol::RobotData;
  }
  // @@protoc_insertion_point(field_mutable:protocol.WorldData.robotData)
  return robotdata_;
}
inline ::protocol::RobotData* WorldData::release_robotdata() {
  // @@protoc_insertion_point(field_release:protocol.WorldData.robotData)
  
  ::protocol::RobotData* temp = robotdata_;
  robotdata_ = NULL;
  return temp;
}
inline void WorldData::set_allocated_robotdata(::protocol::RobotData* robotdata) {
  delete robotdata_;
  robotdata_ = robotdata;
  if (robotdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.WorldData.robotData)
}

// repeated .protocol.Coord obstacleCoords = 2;
inline int WorldData::obstaclecoords_size() const {
  return obstaclecoords_.size();
}
inline void WorldData::clear_obstaclecoords() {
  obstaclecoords_.Clear();
}
inline const ::protocol::Coord& WorldData::obstaclecoords(int index) const {
  // @@protoc_insertion_point(field_get:protocol.WorldData.obstacleCoords)
  return obstaclecoords_.Get(index);
}
inline ::protocol::Coord* WorldData::mutable_obstaclecoords(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.WorldData.obstacleCoords)
  return obstaclecoords_.Mutable(index);
}
inline ::protocol::Coord* WorldData::add_obstaclecoords() {
  // @@protoc_insertion_point(field_add:protocol.WorldData.obstacleCoords)
  return obstaclecoords_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::Coord >*
WorldData::mutable_obstaclecoords() {
  // @@protoc_insertion_point(field_mutable_list:protocol.WorldData.obstacleCoords)
  return &obstaclecoords_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::Coord >&
WorldData::obstaclecoords() const {
  // @@protoc_insertion_point(field_list:protocol.WorldData.obstacleCoords)
  return obstaclecoords_;
}

// optional .protocol.Coord ballCoord = 3;
inline bool WorldData::has_ballcoord() const {
  return !_is_default_instance_ && ballcoord_ != NULL;
}
inline void WorldData::clear_ballcoord() {
  if (GetArenaNoVirtual() == NULL && ballcoord_ != NULL) delete ballcoord_;
  ballcoord_ = NULL;
}
inline const ::protocol::Coord& WorldData::ballcoord() const {
  // @@protoc_insertion_point(field_get:protocol.WorldData.ballCoord)
  return ballcoord_ != NULL ? *ballcoord_ : *default_instance_->ballcoord_;
}
inline ::protocol::Coord* WorldData::mutable_ballcoord() {
  
  if (ballcoord_ == NULL) {
    ballcoord_ = new ::protocol::Coord;
  }
  // @@protoc_insertion_point(field_mutable:protocol.WorldData.ballCoord)
  return ballcoord_;
}
inline ::protocol::Coord* WorldData::release_ballcoord() {
  // @@protoc_insertion_point(field_release:protocol.WorldData.ballCoord)
  
  ::protocol::Coord* temp = ballcoord_;
  ballcoord_ = NULL;
  return temp;
}
inline void WorldData::set_allocated_ballcoord(::protocol::Coord* ballcoord) {
  delete ballcoord_;
  ballcoord_ = ballcoord;
  if (ballcoord) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.WorldData.ballCoord)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_world_5fdata_2eproto__INCLUDED
